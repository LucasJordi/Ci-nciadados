# -*- coding: utf-8 -*-
"""Algoritmo trade.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e7P-H2Os6x0n5QrIY7t-mmlmk0WgmCtN
"""

#Inicio do projeto para análise de trade:
import pandas as pd, numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Carregando dados
from google.colab import files
uploaded= files.upload()

#Passando dos dados para o banco de dados
data = pd.read_csv('EURUSDM5.csv',encoding = "utf-16")
data.columns = ['Data', 'Abertura','Maxima','Minima','Fechamento','Ticks','Volume']
#Escolhendo o índice

data=data.set_index(pd.DatetimeIndex(data['Data'].values))
tipo_candle= []

for i in range(0,len(data)):
  if data['Fechamento'][i] > data['Abertura'][i]:

    tipo_candle.append("Verde")
  else:

    tipo_candle.append("Vermelho")  

data['Corpo']=abs(data['Fechamento']-data['Abertura'])
data["Candle"]=tipo_candle

#mostrar dados
data

#Visualizando os dados de fechamento do preço
plt.figure(figsize=(100,100))
plt.title('Preço de Fechamento')
plt.plot(data['Fechamento'])
plt.xlabel('Data', fontsize=18)
plt.ylabel('Fechamento', fontsize=18)
plt.show()

#Calculo de médias móveis
a=9
b=20
c=42
EMA1=data.Fechamento.ewm(span=a, adjust=False).mean()
EMA2=data.Fechamento.ewm(span=b, adjust=False).mean()
EMA3=data.Fechamento.ewm(span=c, adjust=False).mean()

#Visualizando as médias móveis do gráfico
plt.figure(figsize=(30, 30))
plt.title('Preço de Fechamento')
plt.plot(data['Fechamento'], label= 'Fechamento', color='blue')
plt.plot(EMA1, label = 'Média 9', color= 'green')
plt.plot(EMA2, label = 'Média 20', color= 'red')
plt.plot(EMA3, label = 'Média 42' , color='orange')
plt.xlabel('Data', fontsize=18)
plt.ylabel('Fechamento', fontsize=18)
plt.show()

#Adicionando as médias ao data set

data['EMA9']= EMA1
data['EMA20']=EMA2
data['EMA42']=EMA3

data

# Adicionando colunas de retorno, média e desvio padrão



data['Desv_pad'] = data.loc[:,'Fechamento'].rolling(window=20).std()


data

data.loc[data['Desv_pad']==0.0009687913432063116]
#data['Desv_pad'] = data['Desv_pad'].fillna(0)
#max(data['Desv_pad'])
plt.figure(figsize=(30, 30))
plt.title('Desvio padrão')

plt.plot(data['Desv_pad'], label= 'Fechamento', color='green')
#plt.scatter(data.index, data['Comprado'], color='green', marker='^', alpha=1)

#plt.scatter(data.index, data['Vendido'], color='yellow' )
plt.xlabel('Data', fontsize=18)
plt.ylabel('Fechamento', fontsize=18)
plt.show()

data.loc[data['Data']=='2020.01.02 15:05']
#data.loc[data['Desv_pad']>=0.0014]

#Criando função para compra e venda


def compra_venda_func(data):

  lista=[]
  

  for i in range(0,len(data)):
    dd=data['Corpo'][i-1]+data['Corpo'][i-2]+data['Corpo'][i-3]
    if (data['Corpo'][i] > dd) & (data['Candle'][i] == "Verde") :

      if (data['EMA9'][i] > data['EMA20'][i]) :

        lista.append("Compra")

      else:

        lista.append("n")  


      

    elif  (data['Corpo'][i] > dd) & (data['Candle'][i]=="Venda"):

      if data['EMA9'][i] < data['EMA20'][i]:

        lista.append("Venda")

      else:

        lista.append("n")  

      


    else:

      lista.append("n") 
        

    
  return(lista)

#Adicionando dados no data set

compra_venda_func(data)

# Plotando gráfico

plt.figure(figsize=(12.2, 4.5))
plt.title('Preço de Fechamento')
plt.plot(data['Fechamento'], label= 'Fechamento', color='blue')
plt.plot(EMA1, label = 'Média 9', color= 'green')
plt.plot(EMA2, label = 'Média 20', color= 'red')
plt.plot(EMA3, label = 'Média 42' , color='orange')
#plt.scatter(data.index, data['Comprado'], color='green', marker='^', alpha=1)

#plt.scatter(data.index, data['Vendido'], color='yellow' )
plt.xlabel('Data', fontsize=18)
plt.ylabel('Fechamento', fontsize=18)
plt.show()

data

data['Operação']=compra_venda_func(data)

data.iloc[:22]

lista2=[]
for i in range(0,len(data)):

  if data['Operação'][i]=="Compra":

    if data["Candle"][i+1]=="Verde":

      lista2.append("Gain")
    else:
      lista2.append("Loss") 

  else:
    lista2.append(0)   




data['Resultado']=lista2


data.groupby('Resultado')['Resultado'].count()

#Checando se o movimento de alta continuou mesmo após ter levado loss

data['Candle_post']=data['Candle'].shift(periods=-2)
data['Candle_post2']=data['Candle'].shift(periods=-3)
data.loc[data['Resultado']=='Loss','Desv_pad':'Candle_post2']

data['Candle_post']=data['Candle'].shift(periods=-2)
data['Candle_post2']=data['Candle'].shift(periods=-3)
data.loc[data['Resultado']=='Gain','Desv_pad':'Candle_post2']

data.groupby('Operação')['Operação'].count()